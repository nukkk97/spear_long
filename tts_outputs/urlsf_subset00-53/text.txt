Lately Ive been hearing lot about Functional Programming so felt inspired to give some love to object oriented programming and object oriented design as well since they are still very relevant when we design our systems With your permission Id like to start our journey with SOLID principles which are class level object oriented design concepts that in conjunction with an extensive test suite helps you avoid and combat code rot Coined by every coders favorite uncle Robert Martin SOLID is actually conglomerate of five other acronymsSRP OCP LSP ISP DIPthat Ill go into more deeply below among other things SOLID principles help you to keep the primary value of your software high Ew this code smells rotten kd rt When an application becomes festering mass of code that the developers find increasingly hard to maintain Gross So how can we identify future code rot These signs probably indicate code rot to come Rigidity small changes causes the entire system to rebuild small changes causes the entire system to rebuild Fragility changes to one module causes other unrelated modules to misbehave Imagine car system in which changing the radio station affects windows changes to one module causes other unrelated modul
